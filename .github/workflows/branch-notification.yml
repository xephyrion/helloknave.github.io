name: Branch Protection Checker

on:
  schedule:
    - cron: '0 0 * * *'  # Runs at midnight every day
  workflow_dispatch:     # Allows manual triggering

permissions: write-all

jobs:
  check-branch-protection:
    runs-on: ubuntu-latest
    steps:
      - name: Check Branch Protection
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              console.log('Starting branch protection check...');
              console.log('Repository:', context.repo.owner + '/' + context.repo.repo);
              
              // Get the current repository's branch protection
              const response = await github.rest.repos.getBranchProtection({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: 'main'
              });
              
              console.log('Branch protection response:', JSON.stringify(response.data, null, 2));
              
              const protectionDetails = {
                required_status_checks: response.data.required_status_checks ? 'Enabled' : 'Disabled',
                enforce_admins: response.data.enforce_admins.enabled ? 'Enabled' : 'Disabled',
                required_pull_request_reviews: response.data.required_pull_request_reviews ? 'Enabled' : 'Disabled',
                restrictions: response.data.restrictions ? 'Enabled' : 'Disabled'
              };
              
              const notificationText = `Branch Protection Status Check\n\n` +
                `Repository: ${context.repo.owner}/${context.repo.repo}\n` +
                `Branch: main\n` +
                `Status: Protected\n\n` +
                `Details:\n` +
                `• Required Status Checks: ${protectionDetails.required_status_checks}\n` +
                `• Enforce Admins: ${protectionDetails.enforce_admins}\n` +
                `• Required PR Reviews: ${protectionDetails.required_pull_request_reviews}\n` +
                `• Branch Restrictions: ${protectionDetails.restrictions}`;
              
              // Send to Slack
              await fetch(process.env.SLACK_WEBHOOK_URL, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  text: "Branch Protection Status Update",
                  blocks: [
                    {
                      type: "section",
                      text: {
                        type: "mrkdwn",
                        text: notificationText
                      }
                    }
                  ]
                })
              });
              
            } catch (error) {
              if (error.status === 404) {
                console.log('No branch protection rules found');
                const warningText = `⚠️ Branch Protection Missing!\n\n` +
                  `Repository: ${context.repo.owner}/${context.repo.repo}\n` +
                  `Branch: main\n` +
                  `Status: NOT PROTECTED\n\n` +
                  `This branch has no protection rules configured.`;
                
                // Send warning to Slack
                await fetch(process.env.SLACK_WEBHOOK_URL, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({
                    text: "⚠️ Branch Protection Missing",
                    blocks: [
                      {
                        type: "section",
                        text: {
                          type: "mrkdwn",
                          text: warningText
                        }
                      }
                    ]
                  })
                });
              } else {
                console.error('Error checking branch protection:', error);
                console.error('Error details:', {
                  status: error.status,
                  message: error.message,
                  documentation_url: error.documentation_url
                });
                throw error;
              }
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 
